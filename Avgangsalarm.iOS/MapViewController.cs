// This file has been autogenerated from a class added in the UI designer.
using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Avgangsalarm.Core.Services;
using MonoTouch.MapKit;
using MonoTouch.CoreLocation;
using Avgangsalarm.Core;
using System.Text;

namespace Avgangsalarm.iOS
{
	public partial class MapViewController : UIViewController
	{
		IMonitorGeoFences _monitorGeoFences = DummyContainer.MonitorGeoFences; 
		ILocationRepository _repository = DummyContainer.LocationRepository;
		ILog _logger = LogManager.GetLogger(typeof(MapViewController));
		MKMapView _mapView; 

		public MapViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Perform any additional setup after loading the view, typically from a nib.
			CreateMapView ();
			ShowLocationsAsAnnotations ();
		}

		void CreateMapView ()
		{
			_mapView = new MKMapView (UIScreen.MainScreen.Bounds);
			_mapView.ShowsUserLocation = true;
			View.InsertSubview (_mapView, 0);
		}

		void ShowLocationsAsAnnotations ()
		{
			var locations = _repository.FetchAll ();

			bool locationSet = false;

			foreach (var l in locations) 
			{
				if (!locationSet) 
				{
					locationSet = true;
					ZoomToFirstLocation (l);
				}

				var annotation = new MKPointAnnotation 
				{
					Title = l.Name,
					Coordinate = new CLLocationCoordinate2D (l.Region.Latitude, l.Region.Longitude)
				};

				_mapView.AddAnnotation (annotation);
			}
		}

		void ZoomToFirstLocation (Location l)
		{
			var coord = new CLLocationCoordinate2D {
				Latitude = l.Region.Latitude,
				Longitude = l.Region.Longitude
			};

			var span = new MKCoordinateSpan 
			{
				LatitudeDelta = 1,
				LongitudeDelta = 1,
			};

			var region = new MKCoordinateRegion  
			{
				Center = coord,
				Span = span,
			};

			_mapView.SetRegion (region, false);
		}
	}
}
