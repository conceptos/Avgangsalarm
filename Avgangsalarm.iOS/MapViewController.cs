// This file has been autogenerated from a class added in the UI designer.
using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Avgangsalarm.Core.Services;
using MonoTouch.MapKit;
using MonoTouch.CoreLocation;
using Avgangsalarm.Core;
using System.Text;
using Avgangsalarm.iOS.Delegates;
using System.Collections.Generic;
using TinyIoC;

namespace Avgangsalarm.iOS
{
	public partial class MapViewController : UIViewController
	{
		ILocationRepository _repository;
		ILog _logger = LogManager.GetLogger(typeof(MapViewController));
		MKMapView _mapView; 

		public MapViewController () : base("MapView", null)
		{
			_repository = TinyIoCContainer.Current.Resolve<ILocationRepository> ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Perform any additional setup after loading the view, typically from a nib.
			CreateMapView ();
			ShowLocationsInMap ();
		}

		void CreateMapView ()
		{
			_mapView = new MKMapView (UIScreen.MainScreen.Bounds);
			_mapView.ShowsUserLocation = true;
			_mapView.Delegate = new MapViewDelegate ();
			View.InsertSubview (_mapView, 0);
		}

		// Dictionary<Location, IMKAnnotation> _annotationsMap = new Dictionary<Location, IMKAnnotation> ();
		// Dictionary<Location, IMKOverlay> _overlaysMap = Dictionary<Location, IMKOverlay> ();

		void ShowLocationsInMap ()
		{
			var locations = _repository.FetchAll ();
				
			foreach (var l in locations) 
			{
				_logger.Info (string.Format ("MapViewController: Adding visuals for '{0}'", l.Name));

				var annotation = new MKPointAnnotation 
				{
					Title = l.Name,
					Coordinate = new CLLocationCoordinate2D (l.Region.Latitude, l.Region.Longitude)
				};

				_mapView.AddAnnotation (annotation);
				// _annotationsMap.Add (l, annotation);

				var circleOverlay = MKCircle.Circle (annotation.Coordinate, l.Region.AlertZoneRadiusInMeters);
				_mapView.AddOverlay (circleOverlay);
				// _overlaysMap.Add (l, circleOverlay);
			}
		}
	}
}
